# When you want to create any template you shoul use aws documentations.

# You shoul use extension AWS CloudFormation template Lint, YAML, CloudFormation Snippets 
# You shoul start with "cfn"

AWSTemplateFormatVersion: 2010-09-09

Description: |
  
Parameters:
  #5. KeyPair:
  AWSKeyPair:
    Description: Select your keypair.
    Type: AWS::EC2::KeyPair::KeyName



  #4. InstanceType was created to use by !Ref within LauncTemplate
  InstanceType:
    Description: Select your instance type
    Type: 
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.nano
      - t3.nano

Mappings:
  #6. Mappin use with !FindInMap function. [ MapName,TopLevelKey,SecondLevelKey ]
  # We use it Resources/LaunchTemplate/ImageId
  RegionImageMap:
    us-east-1:
      AMI: ami-0022f774911c1d690
    us-east-2:
      AMI: ami-0233c2d874b811deb
    us-west-1:
      AMI: ami-0ed05376b59b90e46
    us-west-2:
      AMI: ami-0dc8f589abe99f538
    eu-west-1:
      AMI: ami-058b1b7fe545997ae
  
Resources:
  #3. Launch Template
  PractiseLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !FindInMap # we determined it in Mapping
          - RegionImageMap # [MapName]
          - !Ref AWS::Region  # How to find in which region you work---Pseudo Parameters must be used
          - AMI # [SecondLevelKey]
        InstanceType: !Ref InstanceType # it returns Parameters/IstanceType Values
        KeyName: !Ref AWSKeyPair
        SecurityGroupIds: #if you use created vpc by yourself you must use SEcurityGroupsId
        # And only on of (SecurityGroups or SGid can used)
        # You must use security groups id with GetAtt (Get atribute)
          - !GetAtt PractiseSecurityG.GroupId # you use Security groups ID
        
        UserData: !Base64 |
        #! /bin/bash
          yum update -y
          yum install -y httpd
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
          && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
          DATE_TIME=`date`
          chmod -R 777 /var/www/html
          echo "<html>
          <head>
              <title> Congratulations! You have created an instance from Launch Template</title>
          </head>
          <body>
              <h1>This web server is launched from launch template by YOUR_NAME</h1>
              <p>This instance is created at <b>$DATE_TIME</b></p>
              <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
              <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
          </body>
          </html>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
        
  # 2.Create Target Group
  PractiseTargetG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: PractiseTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: "String" # add later
  # 1.creating security group
  PractiseSecurityG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables HTTP and SSH # Required
      GroupName: TemplateSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        Tags
      VpcId: "String" # add later
  
  
Outputs: